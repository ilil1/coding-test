import java.util.Scanner;

public class Main {

    public static int MAX = Integer.MIN_VALUE;	// 최댓값
    public static int MIN = Integer.MAX_VALUE;	// 최솟값
    public static int[] operator = new int[4];	// 연산자 개수
    public static int[] number;					// 숫자
    public static int N;						// 숫자 개수
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        N = in.nextInt();
        number = new int[N];
        // 배열의 index에 따른 숫자 입력.
        for (int i = 0; i < N; i++) {
            number[i] = in.nextInt();
        }
        // 연산자의 index에 따른 부호의 갯수 입력.
        // 연산자의 index에 부호는 정해져 있다. 차례대로 덧셈(+)의 개수, 뺄셈(-)의 개수, 곱셈(×)의 개수, 나눗셈(÷)의 개수
        for (int i = 0; i < 4; i++) {
            operator[i] = in.nextInt();
        }
        dfs(number[0], 1);

        //System.out.println(MAX);
        //System.out.println(MIN);
    }

    public static void dfs(int num, int idx) {
        if (idx == N) {
            MAX = Math.max(MAX, num);
            MIN = Math.min(MIN, num);
            return;
        }
        for (int i = 0; i < 4; i++) {
            if (operator[i] > 0) {
                //operator[0] : 덧셈, operator[1] : 뺄셈(-), operator[2] : 곱셈(×), operator[3] : 나눗셈(÷)
                //operator[0] > 0 이면 그것을 -로 빼주면서 dfs를 재귀로 돌고 일치하는 i에 대한 연산자 값을 계산한다.
                //즉, 가능한 연산자의 순서를 차례대로 정렬을 한다. 그리고 그에 따라서 숫자를 계산해준다.
                //모든 가능한 연산자의 형태를 다 계산을 하게 된다.
                operator[i]--; //계산된 연산자는 감소 시킨다. 다음 dfs에서 재활용 되지 않게 하는 것이 목적.
                switch (i) {
                    case 0:	dfs(num + number[idx], idx + 1);
                        break;
                    case 1:	dfs(num - number[idx], idx + 1);
                        break;
                    case 2:	dfs(num * number[idx], idx + 1);
                        break;
                    case 3:	dfs(num / number[idx], idx + 1);
                        break;
                }
                operator[i]++; //dfs 계산이 끝난경우 복구해준다.
            }
        }
    }
}